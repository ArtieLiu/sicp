(define (full-adder a b c-in sum c-out) 
  (let ((s (make-wire))
	(c1 (make-wire))
	(c2 (make-wire)))
    (half-adder b c-in s   c1)
    (half-adder a s    sum c2)
    (or-gate c1 c2 c-out)
    'ok))

(define Ak (list (make-wire) (make-wire)))
(define Bk (list (make-wire) (make-wire)))
(define Sk (list (make-wire) (make-wire)))
(define C (make-wire))

(define (ripple-carry-adder Ak Bk Sk C)
  (cond ((null? (cdr Sk)) 
	 (full-adder (car Ak)
		     (car Bk)
		     0
		     (car Sk)
		     C))
	(else (let ((c_internal (make-wire)))
		(full-adder (car Ak)
			    (car Bk)
			    c_internal
			    (car Sk)
			    C)
		(ripple-carry-adder (cdr Ak)
				    (cdr Bk)
				    (cdr Sk)
				    c_internal)))))
